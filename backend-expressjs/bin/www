#!/usr/bin/env node

import workspace from "../models/workspace.js";

/**
 * Module dependencies.
 */
const {
  User,
  Notification,
  Workspace,
  Board,
  Activity,
} = require("../models/index.js");
const { AsyncLocalStorage } = require("async_hooks");
var app = require("../app");
var debug = require("debug")("backend-expressjs:server");
var http = require("http");
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*", // Hoặc bạn có thể cung cấp URL cụ thể của máy chủ web của bạn
  },
});
// Sự kiện kết nối mới
let onlineUsers = [];

const addNewUser = (userId, workspaceId, socketId) => {
  !onlineUsers.some((user) => +user.id === +userId) &&
    onlineUsers.push({ id: userId, socketId, workspaceId });
};

const removeUser = (socketId) => {
  onlineUsers = onlineUsers.filter((user) => user.socketId !== socketId);
};

const getUser = (userId) => {
  return onlineUsers.find((user) => +user.id === +userId);
};

const updateUser = (incomingUser) => {
  const user = onlineUsers.find((u) => +u.id === +incomingUser.id);

  if (user) {
    Object.key(incomingUser).forEach(([key]) => {
      if (key !== "id") user[key] = incomingUser[key];
    });
  }
};
/**
 * Listen on provided port, on all network interfaces.
 */
console.log(onlineUsers);

io.on("connection", (socket) => {
  socket.on("newUser", (userOnl) => {
    if (!userOnl) return;

    // Thêm người dùng mới vào danh sách online
    addNewUser(userOnl.id, userOnl.workspace_id_active, socket.id);

    // Phát sự kiện thông báo trạng thái người dùng
    socket.broadcast.emit("getStatusUser", userOnl);
  });

  socket.on("inviteUser", async (body) => {
    const { userInvite, userInvited } = body;

    if (!userInvited || !userInvite) return;

    const usersWorkspace = onlineUsers.filter(
      (user) =>
        +user.workspaceId === +userInvite.workspace_id_active &&
        +user.id !== +userInvite.id
    );

    const userInvitedOnl = getUser(userInvited.id);

    if (usersWorkspace.length) {
      const socketIds = usersWorkspace.map((user) => user.socketId);

      io.to(socketIds).emit("getUserWorkspace", {
        user: userInvited,
        type: "invite_user",
      });
    }

    if (userInvitedOnl) {
      const workspace = await Workspace.findByPk(
        userInvite.workspace_id_active
      );

      workspace.dataValues.role = userInvited.role;

      io.to(userInvitedOnl.socketId).emit("getUserWorkspace", {
        workspace,
        user: userInvited,
        type: "invite_user",
      });
    }
  });

  socket.on("removeUser", async (body) => {
    const { userAction, userRemove } = body;

    if (!userRemove || !userAction) return;

    const usersWorkspace = onlineUsers.filter(
      (user) =>
        (+user.workspaceId === +userAction.workspace_id_active &&
          +user.id !== +userAction.id) ||
        +user.id === +userRemove.id
    );

    if (usersWorkspace.length) {
      const socketIds = usersWorkspace.map((user) => user.socketId);

      io.to(socketIds).emit("getUserWorkspace", {
        workspace: { id: userAction.workspace_id_active },
        user: userRemove,
        type: "remove_user",
      });
    }
  });
  socket.on("updateWorkspace", async (body) => {
    const { workspace_id, userActionId } = body;
    const userAction = await User.findByPk(userActionId);
    const workspace = await Workspace.findByPk(workspace_id);
    if (!workspace || !userAction) {
      return;
    }
    const users = onlineUsers.filter(
      (user) =>
        +user.workspaceId === +workspace.id && +user.id !== +userAction.id
    );
    if (users.length > 0) {
      for (const user of users) {
        io.to(user.socketId).emit("getWorkspaceUpdated", workspace);
      }
    }
  });
  socket.on("sendNotification", async (body) => {
    const { user_id, notification } = body;

    if (!user_id || !notification) return;

    const receiver = getUser(user_id);

    if (receiver) {
      io.to(receiver.socketId).emit("getNotification", notification);
    }
  });

  socket.on("logout", async () => {
    const userOff = onlineUsers.find((user) => user.socketId === socket.id);

    if (!userOff) return;

    // Cập nhật trạng thái người dùng và xóa khỏi danh sách online
    removeUser(socket.id);

    // Thông báo trạng thái người dùng offline
    socket.broadcast.emit("getStatusUser", { id: userOff.id, isOnline: false });

    // Xử lý nếu người dùng đang ở trong board
    if (userOff.board_id) {
      const usersInBoard = onlineUsers.filter(
        (user) => user.board_id === userOff.board_id
      );

      if (usersInBoard.length) {
        const socketIds = usersInBoard.map((user) => user.socketId);
        io.to(socketIds).emit("getUserVisitBoard", usersInBoard);
      }
    }
  });

  socket.on("visitBoard", async (body) => {
    const { board_id, user_id } = body;

    if (!board_id || !user_id) return;

    updateUser({ id: user_id, board_id });

    const usersVisitBoard = onlineUsers.filter(
      (user) => +user.board_id === +board_id
    );

    if (usersVisitBoard.length) {
      const socketIds = usersVisitBoard.map((user) => user.socketId);

      io.to(socketIds).emit("getUserVisitBoard", usersVisitBoard);
    }
  });

  socket.on("disconnect", async () => {
    const userOff = onlineUsers.find((user) => user.socketId === socket.id);

    if (!userOff) return;
    const boardId = userOff.board_id || null;
    // Cập nhật trạng thái người dùng và xóa khỏi danh sách online
    await User.update({ isOnline: false }, { where: { id: userOff.id } });
    removeUser(socket.id);

    // Thông báo trạng thái người dùng offline
    socket.broadcast.emit("getStatusUser", { id: userOff.id, isOnline: false });

    // Xử lý nếu người dùng đang ở trong board
    if (boardId) {
      const usersInBoard = onlineUsers.filter(
        (user) => user.board_id === boardId
      );

      if (usersInBoard.length) {
        const socketIds = usersInBoard.map((user) => user.socketId);
        io.to(socketIds).emit("getUserVisitBoard", usersInBoard);
      }
    }
  });
});
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
